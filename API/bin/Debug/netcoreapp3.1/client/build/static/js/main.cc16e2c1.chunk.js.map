{"version":3,"sources":["serviceWorker.js","ProtectedRoute.js","LandingPage.js","ChatRoom.js","index.js"],"names":["Boolean","window","location","hostname","match","ProtectedRoute","Component","this","props","component","isAuthenticated","localStorage","getItem","console","log","to","pathname","LandingPage","handleChange","event","target","name","value","setState","handleNewUserSubmit","e","preventDefault","postNewUser","handleLogInSubmit","logInUser","redirectUser","state","toChatRoom","axios","post","username","newUsername","password","newPassword","then","res","setItem","data","id","userId","catch","err","response","title","errorMessage","existingUsername","existingPassword","logInErrorMessage","className","Container","fluid","Row","Col","Form","onSubmit","Label","Control","type","onChange","Button","variant","Group","controlId","placeholder","ChatRoom","getMessagesFromDatabase","get","messageDates","sort","a","b","Date","createdDate","messages","getUsers","users","putNewUserName","parseId","parseInt","put","postNewMessage","parseUserId","sessionId","text","messageInput","handleSubmit","addLastActive","clearInput","handleClick","removeItem","isLoggedIn","onKeyPress","which","setInterval","userList","map","user","index","key","color","width","height","userMessages","message","style","href","onClick","size","sortedDates","as","rows","ReactDOM","render","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.cc16e2c1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\n\n  class ProtectedRoute extends Component {\n\n    render() {\n        const Component = this.props.component;\n        const isAuthenticated = localStorage.getItem(\"session_id\");\n        console.log(isAuthenticated)\n\n        return (isAuthenticated !== null)  ? (\n            <Component />\n        ) : (\n            <Redirect to={{ pathname: '/login' }} />\n        );\n    }\n  }\n\n  export default ProtectedRoute;","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Button, Row, Col, Form } from \"react-bootstrap\";\nimport \"./index.css\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport * as Scroll from 'react-scroll';\n\nclass LandingPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      newUsername: \"\",\n      newPassword: \"\",\n      existingUsername: \"\",\n      existingPassword: \"\",\n      errorMessage: \"\",\n      logInErrorMessage: \"\",\n      toChatRoom: false\n    };\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n      errorMessage: \"\",\n      logInErrorMessage: \"\"\n    });\n  };\n\n  handleNewUserSubmit = e => {\n    e.preventDefault();\n    this.postNewUser();\n  };\n\n  handleLogInSubmit = e => {\n    e.preventDefault();\n      this.logInUser();\n\n  };\n\n  redirectUser =() => {\n    if (this.state.toChatRoom === true) {\n      return <Redirect to='/' />\n    }\n  }\n\n  \n  postNewUser = () => {\n    axios\n      .post(\"/api/register\", {\n        username: this.state.newUsername,\n        password: this.state.newPassword\n      })\n        .then(res => {\n          localStorage.setItem(\"session_id\", res.data.id);\n          localStorage.setItem(\"user_id\", res.data.userId);\n     \n      })\n      .catch(err => {\n        if (err.response.data.title === \"empty username\") {\n          this.setState({\n            errorMessage: \"Please choose a username.\"\n          });\n        }\n        if (err.response.data.title === \"empty password\") {\n          this.setState({\n            errorMessage: \"Please choose a password.\"\n          });\n        }\n        if (err.response.data.title === \"redundant username\") {\n          this.setState({\n            errorMessage:\n              \"The username you chose is already taken.  Please try another entry.\"\n          });\n        }\n      });\n  };\n\n  logInUser = () => {\n    axios\n      .post(\"/api/authorize\", {\n        username: this.state.existingUsername,\n        password: this.state.existingPassword\n      })\n        .then(res => {\n          console.log(res.data);\n          localStorage.setItem(\"session_id\", res.data.id);\n          localStorage.setItem(\"user_id\", res.data.userId);\n        this.setState({\n          toChatRoom: true\n        })\n      })\n      .catch(err => {\n  \n        if (err.response.data.title === \"empty username\") {\n          this.setState({\n            logInErrorMessage: \"Please enter a username.\"\n          });\n        }\n        if (err.response.data.title === \"empty password\") {\n          this.setState({\n            logInErrorMessage: \"Please enter a password.\"\n          });\n        }\n        if (err.response.data.title === \"false username\") {\n          this.setState({\n            logInErrorMessage:\n              \"The username you chose is already taken.  Please try another entry.\"\n          });\n        }\n          if (err.response.data.title === \"wrong credentials\") {\n              this.setState({\n                  logInErrorMessage: \"Username or password are invalid.\"\n              });\n          }\n      });\n  };\n\n    render() {\n      console.log(this.state.toChatRoom)\n    if (this.state.toChatRoom === true) {\n      return <Redirect to='/' />\n    } \n\n    return (\n      <div className=\"main-container\">\n        <Container className=\"top-container\" fluid>\n          <Row className=\"h-100\">\n            <Col className=\"gab-column\">\n              <h1 className=\"gab-logo\">\n                <span className=\"purple-gab\">The Gab</span> Chat Room\n              </h1>\n            </Col>\n            <Col>\n              <Form className=\"sign-in-form\" onSubmit={this.handleLogInSubmit}>\n                <Form.Row className=\"sign-in-row\">\n                  <Col className=\"col-xs-5 username-col\">\n                    <Form.Label className=\"top-form-label\">Username</Form.Label>\n                    <Form.Control\n                      type=\"input\"\n                      className=\"input-sign-in\"\n                      onChange={this.handleChange}\n                      name=\"existingUsername\"\n                    />\n                  </Col>\n                  <Col className=\"col-xs-5 password-col\">\n                    <Form.Label className=\"top-form-label\">Password</Form.Label>\n                    <Form.Control\n                      type=\"input\"\n                      className=\"input-sign-in\"\n                      onChange={this.handleChange}\n                      name=\"existingPassword\"\n                    />\n                  </Col>\n              \n                    <Button className=\"login-btn\" variant=\"dark\" type=\"submit\">\n                    <h6 className=\"text-center login-text\">Log In</h6>\n                    </Button>\n                    <h6>{this.state.logInErrorMessage}</h6>\n            \n                </Form.Row>\n              </Form>\n            </Col>\n          </Row>\n        </Container>\n        <Container className=\"bottom-container\" fluid>\n          <Row className=\"w-100\">\n            <Col className=\"w-100\">\n              <h1 className=\"join-text\">Join The Gab Community</h1>\n              <h2 className=\"painless-text\">It's quick and painless.</h2>\n            </Col>\n          </Row>\n          <br />\n          <Row>\n            <Col>\n              <Form\n                className=\"mt-3 sign-up-form\"\n                onSubmit={this.handleNewUserSubmit}\n              >\n                <Form.Group controlId=\"formBasicEmail\">\n                  <Form.Label>Choose username</Form.Label>\n                  <Form.Control\n                    type=\"input\"\n                    placeholder=\"Enter a new username\"\n                    name=\"newUsername\"\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                  <Form.Label>Choose password</Form.Label>\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Enter a new password\"\n                    name=\"newPassword\"\n                    onChange={this.handleChange}\n                  />\n                </Form.Group>\n                <Button variant=\"light\" type=\"submit\">\n                  Submit\n                </Button>\n              </Form>\n              <br />\n              <h2 className=\"text-center error-text\">\n                {this.state.errorMessage}\n              </h2>\n            </Col>\n          </Row>\n          <div className=\"container-fluid footer-container\">\n            <footer>\n              <h6 className=\"text-center footer-text mt-2\">\n                Copyright Reid Muchow 2020\n              </h6>\n            </footer>\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Row, Col, Button, InputGroup } from \"react-bootstrap\";\nimport \"./index.css\";\nimport { Circle } from \"react-feather\";\nimport { Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { animateScroll } from \"react-scroll\";\nimport ScrollToBottom, { useScrollToBottom } from \"react-scroll-to-bottom\";\n\nclass ChatRoom extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      messages: [],\n      messageInput: \"\",\n      isLoggedIn: true,\n      sessionId: 0\n    };\n  }\n\n  componentDidMount() {\n    let id = localStorage.getItem(\"session_id\");\n    this.addLastActive();\n    setInterval(() => {\n      this.getMessagesFromDatabase();\n    }, 5000);\n    this.getUsers();\n    this.setState({\n      sessionId: id\n    });\n  }\n\n  getMessagesFromDatabase = () => {\n    axios.get(\"/api/messages\", {}).then(res => {\n      const messageDates = res.data.sort((a, b) => {\n        const message1 = new Date(b.createdDate);\n        const message2 = new Date(a.createdDate);\n        return message1 + message2;\n      });\n      this.setState({\n        messages: messageDates\n      });\n    });\n  };\n\n  getUsers = () => {\n    axios.get(\"/api/users\", {}).then(res => {\n      console.log(res);\n      this.setState({\n        users: res.data\n      });\n    });\n  };\n\n  putNewUserName = () => {\n    let parseId = parseInt(localStorage.getItem(\"user_id\"));\n    axios\n      .put(\"/api/users\", {\n        userId: parseId,\n        newUsername: this.state.newUsername\n      })\n      .then(res => {\n        console.log(res);\n        this.getUsers();\n      });\n  };\n\n  postNewMessage = () => {\n    let parseId = parseInt(localStorage.getItem(\"session_id\"));\n    let parseUserId = parseInt(localStorage.getItem(\"user_id\"));\n    axios\n      .post(\"/api/messages\", {\n        sessionId: parseId,\n        userId: parseUserId,\n        text: this.state.messageInput\n      })\n      .then(res => {\n        const messageDates = res.data.sort((a, b) => {\n          const message1 = new Date(b.createdDate);\n          const message2 = new Date(a.createdDate);\n          return message1 + message2;\n        });\n        this.setState({\n          messages: messageDates\n        });\n      });\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.postNewMessage();\n    this.addLastActive();\n    this.getMessagesFromDatabase();\n    this.clearInput();\n  };\n\n  handleClick = () => {\n    localStorage.removeItem(\"session_id\");\n    localStorage.removeItem(\"user_id\");\n    this.setState({\n      isLoggedIn: false\n    });\n  };\n\n  onKeyPress = e => {\n    if (e.which === 13) {\n      e.preventDefault();\n      this.postNewMessage();\n      this.getMessagesFromDatabase();\n      this.clearInput();\n    }\n  };\n\n  clearInput = () => {\n    this.setState({\n      messageInput: \"\"\n    });\n  };\n\n  addLastActive = () => {\n    let parseId = parseInt(localStorage.getItem(\"user_id\"));\n    axios\n      .put(\"/api/users/last_active\", {\n        userId: parseId\n      })\n      .then(res => {\n        console.log(res);\n      });\n  };\n\n  render() {\n    console.log(this.getMessagesFromDatabase);\n    let id = localStorage.getItem(\"user_id\");\n\n    if (this.state.isLoggedIn === false) {\n      return <Redirect to=\"/login\" />;\n    }\n\n    const userList = this.state.users.map((user, index) => {\n      return (\n        <div key={index}>\n          <Circle\n            className=\"ml-2 d-inline-block\"\n            color=\"white\"\n            width=\"12\"\n            height=\"12\"\n          />\n          <h6 className=\"d-inline-block ml-2\">{user.username}</h6>\n        </div>\n      );\n    });\n\n    const userMessages = this.state.messages.map(message => {\n      return (\n        <div\n          className=\"card message-card\"\n          style={{ width: \"40rem\" }}\n          key={message.createdDate}\n        >\n          <div className=\"card-body\">\n            <h6 className=\"card-title\">{message.username}</h6>\n            <p className=\"card-text\">{message.text}</p>\n          </div>\n        </div>\n      );\n    });\n    return (\n      <div className=\"container\">\n        <div className=\"row justify-content-center h-100\">\n          <div className=\"col-xs h-100 w-25 users-col\">\n            <h5 className=\"d-inline-block users-header\">Users</h5>\n            <a\n              href=\"\"\n              onClick={this.handleClick}\n              className=\"d-inline-block justify-content-right log-out-button\"\n              variant=\"secondary\"\n              size=\"sm\"\n            >\n              Log Out\n            </a>\n            <hr className=\"users-border\" />\n            <br />\n            {this.sortedDates}\n            {userList}\n          </div>\n          <ScrollToBottom className=\"h-100 messages-col mt-5\">\n            {userMessages}\n          </ScrollToBottom>\n          <Row className=\"justify-content-center submit-row\">\n            <Col className=\"col-8\">\n              <form onSubmit={this.handleSubmit} onKeyPress={this.onKeyPress}>\n                <Form.Group\n                  controlId=\"exampleForm.ControlTextarea1\"\n                  className=\"textarea-form\"\n                >\n                  <Form.Control\n                    value={this.state.messageInput}\n                    type=\"input\"\n                    onChange={this.handleChange}\n                    name=\"messageInput\"\n                    placeholder=\"Type Message Here\"\n                    as=\"textarea\"\n                    rows=\"3\"\n                  />\n\n                  <Button\n                    className=\"mt-1 d-block messages-submit\"\n                    type=\"submit\"\n                    variant=\"outline-dark\"\n                  >\n                    Submit\n                  </Button>\n                </Form.Group>\n              </form>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChatRoom;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {\n  BrowserRouter,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport LandingPage from \"./LandingPage\";\nimport ChatRoom from \"./ChatRoom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n    <Route path=\"/login\" component={LandingPage} />\n    <ProtectedRoute exact={true} path=\"/\" component={ChatRoom} />\n    <ProtectedRoute component={ChatRoom} />\n    </Switch>\n  </BrowserRouter>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}